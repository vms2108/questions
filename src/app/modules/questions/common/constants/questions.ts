import { SectionEnum } from './../../../../common/enums/section.enum';
import { ComplexityEnum } from './../../../../common/enums/complexity.enum';
import { Question } from 'src/app/common/models/question';

export const QUESTIONS: Question[] = [
  new Question(
    'Какие методы HTTP-запросов вы знаете?',
    'GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH',
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
  ),
  new Question(
    'Метод OPTIONS',
    `Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса. В ответ серверу следует включить заголовок Allow со списком поддерживаемых методов. Также в заголовке ответа может включаться информация о поддерживаемых расширениях.
    <br><br>
    Предполагается, что запрос клиента может содержать тело сообщения для указания интересующих его сведений. Формат тела и порядок работы с ним в настоящий момент не определён; сервер пока должен его игнорировать. Аналогичная ситуация и с телом в ответе сервера.`,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
    ),
  new Question(
    'Метод GET',
    `Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса.
    <br><br>
    Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «?»`,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
  ),
  new Question(
    'Метод HEAD',
    `Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.`,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
    ),
  new Question(
    'Метод POST',
    `Применяется для передачи пользовательских данных заданному ресурсу. При этом передаваемые данные включаются в тело запроса.
    <br><br>
    В отличие от метода GET, метод POST не считается идемпотентным[2], то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты (например, после каждой отправки комментария будет появляться очередная копия этого комментария).`,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
    ),
  new Question(
    'Метод PUT',
    `Применяется для загрузки содержимого запроса на указанный в запросе URI.
    <br><br>
    Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.`,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
    ),

  new Question(
    'Какие версии HTTP-протокола вам известны?',
    `1. Стандарт HTTP/0.9 – версия протокола HTTP 0.9 была разработана в 1991 году в ЦЕРН Тимом Бернерсом-Ли. Тим разработал HTTP протокол для облегчения доступа и создания навигации при помощи гипертекста. Протокол версии 0.9 был призван упорядочить взаимодействие между клиентом и сервером в сети. После появления стандарта HTTP/0.9 появилось разделение функций между клиентом и сервером при их взаимодействии.
    <br><br>
    2. В 1996 году был выпущен информационный документ RFC 1945 (стандарт HTTP/1.0). Данный документ стал основой для реализации приложений и компонентов с использованием протокола HTTP версии 1.0.
    <br><br>
    3. В 1997 году была выпущена версия протокола HTTP1: был разработан стандарт HTTP/1.1 и описан он в документе RFC 2068.
    В 1999 году был доработан стандарт HTTP/1.1 (именно стандарт HTTP/1.1).
    Доработки коснулись: общего дизайна стандарта, формулировки и разъяснения некоторых терминов, исправлены опечатки,
    даны некоторые разъяснения по взаимодействию клиента и HTTP сервера в спорных ситуациях.
    Основным нововведением в версию протокола HTTP 1.1 был режим постоянного соединения, другими словами:
    за одно соединение можно было отправлять несколько HTTP запросов и получать несколько HTTP ответов в том порядке,
    в котором делались запросы.
    Вторым основным нововведение в версию протокола HTTP 1.1 является то,
    что теперь клиент при установке соединения с сервером должен обязательно посылать имя хоста в специальном поле HTTP заголовка
    (данное нововведение привело к массовому распространению виртуальных хостингов).
    На данный момент большинство приложений для своей работы используют HTTP протокол версии 1.1.
    Стоит заметить, что версия HTTP протокола является очень важным HTTP параметром, который должны использовать все приложения.
    `,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
  ),
  new Question(
    'Что такое Cross-Origin Resource Sharing? Как устранить проблемы с CORS?',
    `Механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность агенту пользователя получать разрешения на доступ к выбранным ресурсам с сервера на источнике (домене), отличном от того, что сайт использует в данный момент. <br><br> реализовать проксирование или добавить в header ответа сервера нужные заголовки`,
    ComplexityEnum.JUNIOR,
    SectionEnum.COMMON,
    ),
];
